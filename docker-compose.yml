# define and run multiple Docker containers on a single Docker host.
services:
  postgres_db:   # first container
    container_name: postgres-db
    image: postgres:latest   # official image of postgres
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=feedbackdb  # database name
    volumes:
      - feedback-app-data:/var/lib/postgresql/data  #standard directory where PostgreSQL stores its data
    networks:
      - feedback-app-nw   # Connects the service to the feedback-app-nw network so that it can communicate with other containers on that network, such as feedback_app.
    ports:
      - "5432:5432"     # Map the PostgreSQL port on the host to allow external connections:
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"] #Checks if the PostgreSQL service is ready to accept connections.
      interval: 5s # Check every 5 seconds.
      timeout: 5s  # if  you don't receive a response
      retries: 5  # Retry 5 times before marking the service as unhealthy.

  feedback_app: # second container
    container_name: feedback-app-service
    build:
      context: ./  # where Docker will look for the Dockerfile.
      dockerfile: Dockerfile   # Use the Dockerfile to build the application image.
    environment:  # Define the environment variables that your application needs to connect to the PostgreSQL database:
      - DB_USER=postgres
      - DB_HOST=postgres-db  #The name of the database host, which is the postgres-db container defined above.
      - DB_NAME=feedbackdb
      - DB_PASSWORD=password  #The password to access the database.
      - DB_PORT=5432
    networks:
      - feedback-app-nw  #Connects the service to the feedback-app-nw network, allowing it to communicate with postgres_db.
    ports:
      - "3030:3000"  # Port 3000 inside the container (where the application runs) will be available on port 3030 on the host.
    depends_on:
      postgres_db:
        condition: service_healthy  #The feedback app only starts if postgres_db passes the health check defined above.

networks:
  feedback-app-nw:
    driver: bridge # This allows containers within that network to communicate with each other in isolation from the outside, but still be able to communicate with the host if necessary.

volumes:
  feedback-app-data: #The data in feedback-app-data will remain intact. This is useful for maintaining data in a database, for example, even if the database container is restarted or recreated.

    








